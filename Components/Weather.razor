@using System.Text.Json;
@using BlazorWeatherApp.Interfaces
@inject WeatherService weatherService
@rendermode InteractiveServer




@if(weatherData.HasValue && weatherData.Value.ValueKind != JsonValueKind.Undefined){

<div class="">
    <div class="flex items-center gap-8">
        <svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-cloud-sun">
            <path d="M12 2v2"/>
            <path d="m4.93 4.93 1.41 1.41"/>
            <path d="M20 12h2"/>
            <path d="m19.07 4.93-1.41 1.41"/>
            <path d="M15.947 12.65a4 4 0 0 0-5.925-4.128"/>
            <path d="M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z"/>
        </svg>

        <div>
            <h1 class="font-extrabold text-4xl">@weatherData.Value.GetProperty("main").GetProperty("temp") Â°C</h1>
           
            <div class="flex items-center my-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin">
                    <path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"/>
                    <circle cx="12" cy="10" r="3"/>
                </svg>
                <p>@weatherData.Value.GetProperty("name"), @weatherData.Value.GetProperty("sys").GetProperty("country")</p>
            </div>
        </div>
    </div>
</div>

}else{
    <p>Loading...</p>
} 



@code{

  private JsonElement? weatherData;
  protected override async Task OnInitializedAsync()
  {
    var response  = await weatherService.GetSeachedLocationWeather("Alagbado");

    var jsonString = await response.ReadAsStringAsync();
    
    weatherData = JsonSerializer.Deserialize<dynamic>(jsonString);

  }
}   
