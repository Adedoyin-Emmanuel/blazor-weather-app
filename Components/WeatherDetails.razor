@using System.Text.Json;
@rendermode InteractiveServer
@using BlazorWeatherApp.Interfaces
@inject WeatherService weatherService
@inject IJSRuntime jsRuntime
@inject NavigationManager router




@if(weatherData.HasValue && weatherData.Value.ValueKind != JsonValueKind.Undefined){

<div class="">
    <div class="flex items-center gap-8">
       <div class="image">
         <img  src="https://openweathermap.org/img/wn/@weatherData.Value.GetProperty("weather")[0].GetProperty("icon")@@4x.png" alt="Weather Icon"  />
       </div>
        <div>
            <h1 class="font-extrabold text-4xl">@((int)Math.Round(weatherData.Value.GetProperty("main").GetProperty("temp").GetDouble()))Â° C</h1>
            <div >
               <div class="flex items-center my-2">
                 <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin">
                    <path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"/>
                    <circle cx="12" cy="10" r="3"/>
                </svg>
                <p class="block">@weatherData.Value.GetProperty("name"), @weatherData.Value.GetProperty("sys").GetProperty("country")</p>
               </div>
                <p class="block capitalize text-sm ">@weatherData.Value.GetProperty("weather")[0].GetProperty("description")</p>
            </div>
        </div>
    </div>
</div>

}else{
   <Loader/>
} 



@code{

  private JsonElement? weatherData;
  private bool isLocationFetched = false; 
  private string queryParameters = string.Empty;



protected override void OnInitialized() {
    var uri = new Uri(router.Uri);
    var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

    if (query.TryGetValue("location", out var location)) {
        queryParameters = location.ToString();  
    } else {
        queryParameters = "Location not found"; 
    }
}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isLocationFetched)
        {
            isLocationFetched = true;

            var defaultLocation = queryParameters ?? await jsRuntime.InvokeAsync<string>("localStorage.getItem", "userLocation");
            if (!string.IsNullOrEmpty(defaultLocation))
            {
                var response = await weatherService.GetSeachedLocationWeather(defaultLocation);
                var jsonString = await response.ReadAsStringAsync();

                weatherData = JsonSerializer.Deserialize<JsonElement>(jsonString);
                StateHasChanged();
            }
        }
    }
}   
